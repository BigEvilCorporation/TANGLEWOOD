;==============================================================
;   BIG EVIL FRAMEWORK - Matt Phillips (c) 2015
;==============================================================
;   http://www.bigevilcorporation.co.uk
;==============================================================
;   entity.asm - Basic positional entity
;==============================================================

	rsset 0
;-----------------------------
	IFND FINAL
Entity_DebugName        rs.b entity_name_length ; Debug name string
	ENDIF
;-----------------------------
Entity_TypeBits         rs.l 1 ; Entity type bits
;-----------------------------
Entity_UpdateRoutine	rs.l 1 ; Update subroutine address
Entity_RenderRoutine	rs.l 1 ; Render subroutine address
Entity_SerialiseRoutine	rs.l 1 ; Save/load subroutine address
;-----------------------------
	LINKED_LIST_NODE EntityUpdate ; Next in update linked list
	LINKED_LIST_NODE EntityRender ; Next in render linked list
	LINKED_LIST_NODE EntitySerialise ; Next in serialise linked list
	LINKED_LIST_NODE EntityQuadTree ; Next in quadtree linked list
;-----------------------------
Entity_WorldPosX        rs.l 1 ; Position X (world space)
Entity_WorldPosY        rs.l 1 ; Position Y (world space)
Entity_Width            rs.w 1 ; Width (pixels)
Entity_Height           rs.w 1 ; Height(pixels)
Entity_Active           rs.b 1 ; Active flag
;-----------------------------
Entity_Struct_Pad		rs.b 3
Entity_Struct_Size		rs.b 0

EntityInit:
	; a0 --- SpriteObj addr
	; a1 --- Level addr
	
	move.l #0x0, Entity_TypeBits(a0)      
	move.l #0x0, Entity_UpdateRoutine(a0)
	move.l #0x0, Entity_RenderRoutine(a0)
	move.l #0x0, Entity_SerialiseRoutine(a0)
	move.l #0x0, Entity_WorldPosX(a0)
	move.l #0x0, Entity_WorldPosY(a0)
	move.w #0x0, Entity_Width(a0)
	move.w #0x0, Entity_Height(a0)
	move.b #0x0, Entity_Active(a0)

	move.l #0x0, List_EntityUpdate_Next(a0)
	move.l #0x0, List_EntityRender_Next(a0)
	move.l #0x0, List_EntitySerialise_Next(a0)
	
	rts

;==============================================================
; Game object update/render lists
;==============================================================

EntityAddToUpdateList:
	; a0 --- Entity addr
	LIST_APPEND_TAIL EntityUpdate,a0,a3
	rts

EntityAddToRenderList:
	; a0 --- Entity addr
	LIST_APPEND_TAIL EntityRender,a0,a3
	rts
	
EntityAddToSerialiseList:
	; a0 --- Entity addr
	LIST_APPEND_TAIL EntitySerialise,a0,a3
	rts
	
EntityRemoveFromUpdateList:
	; a0 --- Entity addr
	LIST_REMOVE EntityUpdate,a0,a4,a3
	rts
	
EntityRemoveFromRenderList:
	; a0 --- Entity addr
	LIST_REMOVE EntityRender,a0,a4,a3
	rts
	
EntityRemoveFromSerialiseList:
	; a0 --- Entity addr
	LIST_REMOVE EntitySerialise,a0,a4,a3
	rts
	
EntityClearUpdateList:
	LIST_CLEAR EntityUpdate,a4,a3
	rts
	
EntityClearRenderList:
	LIST_CLEAR EntityRender,a4,a3
	rts
	
EntityClearSerialiseList:
	LIST_CLEAR EntitySerialise,a4,a3
	rts

;==============================================================
; Quadtree
;==============================================================
	IFD ENTITY_USE_QUADTREE
EntityAddToQuadTree:
	; a0 --- Entity address
	; d0 (w) Quadtree index
	
	move.l Entity_RenderRoutine(a0), a2
	cmp.l  #0x0, a2
	beq    @NoRenderRoutine

	IFND FINAL
	cmp.w  #entity_quadtree_maxcells, d0
	blt    @NoErr
	RAISE_EXCEPTION *
	@NoErr:
	ENDIF

	; Get list head
	andi.l #0xFFFF, d0
	lsl.l  #0x2, d0				; Index to ptr offset
	lea    EntityQuadTree, a2
	add.l  d0, a2

	; Get head obj
	move.l (a2), a3
	cmp.l  #0x0, a3
	beq    @FoundTail

	; Find tail
	@FindTailLp:
	lea    List_EntityQuadTree_Next(a3), a2
	cmp.l  #0x0, (a2)
	beq    @FoundTail
	move.l (a2), a3
	bra    @FindTailLp

	@FoundTail:
	move.l a0, (a2)
	
	@NoRenderRoutine:

	rts

EntityRenderQuadTree:
	; d0 (w) Quadtree index

	IFND FINAL
	cmp.w  #entity_quadtree_maxcells, d0
	blt    @NoErr
	RAISE_EXCEPTION *
	@NoErr:
	ENDIF

	; Get list head
	andi.l #0xFFFF, d0
	lsl.l  #0x2, d0				; Index to ptr offset
	lea    EntityQuadTree, a2
	add.l  d0, a2

	; Get head obj
	move.l (a2), a0

	; Render all
	@RenderLp:
	cmp.l  #0x0, a0
	beq    @End
	move.l Entity_RenderRoutine(a0), a2 ; Get Render routine
	jsr    (a2)							; Execute Render routine
	move.l List_EntityQuadTree_Next(a0), a0
	bra    @RenderLp

	@End:

	rts
	ENDIF
	
EntityUpdateAll:
	; a1 --- Level address
	
	IFD DEBUG
	lea Str_Entities, a0
	jsr DBG_Profile_PushScope
	ENDIF

	LIST_GET_HEAD EntityUpdate,a0		; Get list head
	@EntityLp:							; For all entities in list
	cmp.l  #0x0, a0
	beq    @ListEnd
	move.l Entity_UpdateRoutine(a0), a2 ; Get update routine
	jsr    (a2)							; Execute update routine
	LIST_GET_NEXT EntityUpdate,a0,a0	; Get next ptr
	bra    @EntityLp					; Loop
	@ListEnd:

	IFD DEBUG
	jsr DBG_Profile_PopScope
	ENDIF
	
	rts
	
EntityRenderAll:
	; a1 --- Level address

	; Camera left
	move.w WorldScrollX, d2
	move.w d2, d3
	addi.w #vdp_sprite_border_x, d2

	; Camera right
	addi.w #vdp_sprite_border_x+screen_width, d3

	; Camera top
	move.w WorldScrollY, d4
	move.w d4, d5
	addi.w #vdp_sprite_border_y, d4

	; Camera bottom
	addi.w #vdp_sprite_border_y+screen_height, d5
	
	LIST_GET_HEAD EntityRender,a0		; Get list head
	@EntityLp:							; For all entities in list
	cmp.l  #0x0, a0
	beq    @ListEnd
	move.l Entity_RenderRoutine(a0), a2 ; Get Render routine
	jsr    (a2)							; Execute Render routine
	LIST_GET_NEXT EntityRender,a0,a0	; Get next ptr
	bra    @EntityLp					; Loop
	@ListEnd:
	
	rts

	
EntitySerialiseAll:
	; a1 --- Level address
	; a3 --- Stream ptr
	; d1 (b) Direction (serialise_dir_in/serialise_dir_out)
	
	LIST_GET_HEAD EntitySerialise,a0		; Get list head
	@EntityLp:								; For all entities in list
	cmp.l  #0x0, a0
	beq    @ListEnd
	move.l Entity_SerialiseRoutine(a0), a2	; Get Serialise routine
	jsr    (a2)								; Execute Serialise routine
	LIST_GET_NEXT EntitySerialise,a0,a0		; Get next ptr
	bra    @EntityLp						; Loop
	@ListEnd:
	
	rts
	