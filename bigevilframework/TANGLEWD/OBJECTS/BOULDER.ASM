;==============================================================
;   TANGLEWOOD - A game by Matt Phillips - (c) 2016
;==============================================================
;   http://www.bigevilcorporation.co.uk
;==============================================================
;   Boulder.asm - Pushable/rolling boulder
;==============================================================

; Constants
Boulder_MaxEntities			equ 0x2
Boulder_Width				equ 0x40
Boulder_Height				equ 0x40
Boulder_MaxVelYUp			equ 0x0600
Boulder_MaxVelYDown			equ 0x0600
Boulder_StepHeight			equ 0x4
Boulder_ProbeFloorX			equ (Boulder_Width/2)	; Floor detection probe position X
Boulder_ProbeFloorY			equ (Boulder_Height-8)	; Floor detection probe position X
Boulder_MaxVelX				equ 0x0800
Boulder_Decel				equ 0x0008

Boulder_AnimSpeedVelDiv		equ 0x0008

Boulder_MinDamageYVel		equ 0x0500	; Min downward velocity to deal damage to characters
Boulder_HitDamage			equ 0xFF	; Damage dealt to characters

;==============================================================

; Struct
	rsset (AnimObj_Struct_Size)
;--------------------------
Boulder_Animation	 rs.b (Animation_Struct_Size)
;--------------------------
Boulder_Struct_Pad   rs.b 0   ; Alignment padding
Boulder_Struct_Size  rs.b 0

;==============================================================

BoulderInit:
	; a0 --- GameObj addr
	; a1 --- Level addr

	; Base init
	jsr    AnimObjInit
	
	; Set type
	addi.l #entity_type_boulder, Entity_TypeBits(a0)
	addi.w #0x1, EntityCount_Boulders
	
	; Set update and render routines
	move.l #BoulderUpdate, Entity_UpdateRoutine(a0)
	move.l #AnimObjDraw, Entity_RenderRoutine(a0)
	
	; Add to update and render lists
	jsr    EntityAddToUpdateList
	jsr    EntityAddToRenderList
	
	; Default state
	move.b  #0x1, Entity_Active(a0)
	move.b  #0x1, SpriteObj_Visible(a0)
	move.w  #Boulder_Width, Entity_Width(a0)
	move.w  #Boulder_Height, Entity_Height(a0)
	move.w  #Boulder_MaxVelX, GameObj_MaxVelX(a0)
	move.w  #Boulder_Decel, GameObj_DecelX(a0)
	move.w  #Boulder_StepHeight, GameObj_StepHeight(a0)
	move.w  #Boulder_ProbeFloorX, GameObj_FloorProbeX(a0)
	move.w  #Boulder_ProbeFloorY, GameObj_FloorProbeY(a0)
	move.w  #Boulder_MaxVelYUp, GameObj_MaxVelYUp(a0)
	move.w  #Boulder_MaxVelYDown, GameObj_MaxVelYDown(a0)
	
	; Init roll animation
	move.l  a0, a2
	add.l   #Boulder_Animation, a2
	move.l  #Anim_BoulderRoll, Animation_AnimTrackSpriteFrame(a2)
	move.b  #Anim_BoulderRoll_SizeB, Animation_Length(a2)
	move.b  #0x1, Animation_Looping(a2)
	
	; Set animation
	move.l  a2, AnimObj_CurrentAnim(a0)
	move.b  #0x1, AnimObj_Playing(a0)

	rts
	
BoulderUpdate:
	; a0 --- GameObj addr
	; a1 --- Level addr
	
	; Get animation
	move.l  a0, a2
	add.l   #Boulder_Animation, a2

	; Roll anim speed based on velocity
	clr.l  d0
	move.w GameObj_VelX(a0), d0
	divs.w #Boulder_AnimSpeedVelDiv, d0
	move.b d0, Animation_Speed(a2)
	
	; If Y vel > min damage vel
	cmp.w  #-Boulder_MinDamageYVel, GameObj_VelY(a0)
	bge    @NotFalling
	
	move.l a1, -(sp)
	
	; Check if squishing a monster
	move.l #EntityArray_Monsters, a1
	move.w (EntityCount_Monsters), d6
	cmp.w  #0x0, d6
	beq    @NoMonsters
	sub.w  #0x1, d6
	@MonsterLoop:
	move.l d6, -(sp)
	
	; Check monster active
	cmp.b  #0x0, Entity_Active(a1)
	beq    @NextMonster
	
	; Check monster alive
	cmp.b  #0x0, Character_Dead(a1)
	bne    @NextMonster
	
	; Bounds check
	jsr   GetEntityBoundsA0D1D2
	jsr   GetEntityBoundsA1D3D4
	jsr   TestBoxIntersectBox
	cmp.b #0x0, d0
	beq   @NextMonster
	
	; Boulder hit a monster, deal damage
	move.l a0, -(sp)
	move.l a1, a0
	move.l #Boulder_HitDamage, d0
	jsr    CharacterDealDamage
	move.l (sp)+, a0
	
	@NextMonster:
	move.l (sp)+, d6
	add.l #Monster_Struct_Size, a1
	dbra  d6, @MonsterLoop
	
	@NoMonsters:
	@EndMonsterLoop:
	
	move.l (sp)+, a1
	
	@NotFalling:

	; Base functionality
	jsr    AnimObjUpdate

	rts
	